module Mutations
  module Users
    class UpsertUserMutation < BaseMutation
      description 'Creates or returns new user account from their firebase id token'
      authenticate false

      class FailureReason < Types::BaseEnum
        graphql_name 'UpsertUserFailureReason'
        description 'An upsert user mutation failure reason'

        value 'UNAUTHENTICATED', 'The auth header was missing or invalid in the request', value: :unauthenticated
        value 'VALIDATION_ERROR', 'A validation error has occurred', value: :validation
      end

      argument :name, String, "The user's full name", required: false
      argument :username, String, "The user's unique username. Will be autogenerated if not given", required: false

      field :failure_reason, FailureReason, 'The reason why the upsert request failed', null: true
      field :user, Types::UserType, 'The created user account', null: true
      field :validation_errors, Types::ValidationErrorType, 'Validation errors', null: true

      def resolve(name: nil, username: nil)
        payload = AuthenticationManager.parse_token(raw_token)
        return { failure_reason: :unauthenticated } if payload.blank?

        user = User.find_or_initialize_by(
          email: payload['email'],
          firebase_uid: payload['sub']
        )

        if user.new_record?
          user.assign_attributes(name: name, username: username)
          user.save ? { user: user } : { errors: user.errors, failure_reason: :validation }
        else
          { user: user }
        end
      end
    end
  end
end
